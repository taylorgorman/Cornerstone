/*
** This is the best grid
** If I can say so myself
** But I am biased
*/

$ctr_pad_v: calc(#{$row_pad_v} + #{$col_pad_v});
$ctr_pad_h: calc(#{$row_pad_h} + #{$col_pad_h});

.centered, .row {
	display: block;
	margin-left: auto;
	margin-right: auto;
	@if variable-exists(max_width) { max-width: $max_width; }

	&:not(.table) {
		@extend %clearfix;
	}
}
.centered {
	padding: $ctr_pad_v $ctr_pad_h;
	@if variable-exists(max_width) { max-width: $max_width; }
}
.row {
	padding: $row_pad_v $row_pad_h;

	.row {
		max-width: none;
	}
}
.column {
	display: block;
	float: left;
	position: relative;
	padding: $col_pad_v $col_pad_h;
}
.nopad {
	padding: 0;
}
@for $x from 1 through $grid_column_count {

	// Set grid
	.#{$bp_default}-#{$x}, .all-#{$x} {
		width: floor($x / $grid_column_count * 100%);
	}

	// Don't float full-width columns
	.#{$bp_default}-#{$grid_column_count} {
		float: none;
	}

	// Multiple rows of .columns in one .row
	.multi-row .#{$bp_default}-#{$x}:nth-child(#{ round($grid_column_count / $x) }n+1) {
		clear: both;
	}

	// Push and pull
	.#{$bp_default}-push-#{$x} {
		left: round($x / $grid_column_count * 100%);
		right: auto;
	}
	.#{$bp_default}-pull-#{$x} {
		left: auto;
		right: round($x / $grid_column_count * 100%);
	}

}

/*
** "Just put it in a table"
*/
.row.table {
  display: table;
  table-layout: fixed;

	&.va-t .column {
		vertical-align: top;
	}
	&.va-b .column {
		vertical-align: bottom;
	}
	> .column {
		@extend %tcell;

		&, &:last-child {
			float: none;
		}
	}
}

/*
** Responsive
*/
// Get index of media query chosen to start stacking
$stack_columns_index: index_from_key($break_points, $bp_stack_columns);

@each $mq in $media_queries {
@media (nth($mq, 2)) {

	// For the stacked media query and smaller
	@if index($media_queries, $mq) >= $stack_columns_index {

		// Unset grid
	  .column {
	  	width: 100%;
	  	float: none;
	  }

		// CSS Tables
		.row.table:not(.nostack) {
			@include clearfix;

			&, > .column {
				display: block;
			}
			> .column {
				float: left;
			}
		}
	}

	// Multiple rows of .columns in one .row
	.multi-row .column[class*=#{ nth($mq, 1) }-] {
		clear: none;
	}

	// Push and pull
	[class*='push'],
	[class*='pull'] {
		left: auto;
		right: auto;
	}

	// Reset grid for each media query
	@for $x from 1 through $grid_column_count {

		// Set grid
		.#{ nth($mq, 1) }-#{ $x } {
			width: floor($x / $grid_column_count * 100%);
			float: left;
		}

		// Don't float full-width columns
		.#{ nth($mq, 1) }-#{ $grid_column_count } {
			float: none;
		}

		// Multiple rows of .columns in one .row
		.multi-row .#{ nth($mq, 1) }-#{ $x }:nth-child(#{ round($grid_column_count / $x) }n+1) {
			clear: both;
		}

		// Push and pull
		.#{ nth($mq, 1) }-push-#{$x} {
			left: round($x / $grid_column_count * 100%);
			right: auto;
		}
		.#{ nth($mq, 1) }-pull-#{$x} {
			left: auto;
			right: round($x / $grid_column_count * 100%);
		}

	}

	// Full width shouldn't be pushed or pulled
	.#{ nth($mq, 1) }-#{ $grid_column_count } {
		left: auto;
		right: auto;
	}

}
}

@media print {

	.column {
		width: 100%;
		float: none;
	}

}
